#!/usr/bin/env ruby
# frozen_string_literal: true

require 'json'

class API
  attr_reader :func_list

  def initialize
    @func_list = {}
    gen
    @func_list.freeze
  end

  ####################################################################
  #                             api_call                             #
  ####################################################################

  def gen_args(name, user_args)
    args = @func_list[name.to_sym]
    return {} if args == {}
    return hash_to_args(args, user_args) if user_args[0].class == {}.class

    array_to_args(args, user_args)
  end

  def hash_to_args(default, user)
    return unless user.size == 1

    default.merge(user[0].delete_if { |key, _value| !default.key? key })
  end

  def array_to_args(default, user)
    return if user.size > default.size

    it = default.each_key
    args = user.each_with_object({}) { |value, obj| obj[it.next] = value }
    hash_to_args default, [args]
  end

  def call_network(name, args)
    url = '/' + name.to_s
    @network.call(url, args)
  end

  ####################################################################
  #                               gen                                #
  ####################################################################

  def skip_head(file)
    until file.gets.chomp == '## API 列表'; end
  end

  def skip_to_next_api(file)
    while (line = file.gets)
      return nil if line =~ /^## /
      return line.gsub(%r{^### `\/(.+)`.*$}, '\1').chomp if line =~ /^### /
    end
  end

  def skip_to_args(file)
    until file.gets.chomp == '#### 参数'; end
    file.gets
    file.gets.chomp
  end

  def skip_to_table_head(file)
    until file.gets =~ /^\|\s*-+\s*\|\s*-+\s*\|\s*-+\s*\|\s*-+\s*\|$/; end
  end

  def non_arg_check(name, line)
    return unless line == '无'

    @func_list[name.to_sym] = {}
    true
  end

  def get_default(str)
    str.sub!(/^`(.+)`$/, '\1')
    return str.to_i if str =~ /^[+-]?\d+$/
    return true if str == 'true'
    return false if str == 'false'

    m = str.match(/^\s*(\d+)\s*\*\s*(\d+)\s*/)
    return m[1].to_i * m[2].to_i if m

    str
  end

  #         |    `flag`      或 `anonymous_flag` |  string  |    -       |...
  ARGS = /^\|\s*`(\w+)`(?:\s*或\s*`(?:\w+)`)?\s*\|\s+.+?\s+\|\s+(.+?)\s+\|/.freeze
  def get_args(file)
    args = {}
    until (line = file.gets) =~ /^$/
      m = line.match(ARGS)
      args[m[1].to_sym] = case m[2]
                          when '空' then ''
                          when '-' then nil
                          else get_default m[2]
                          end
    end
    args
  end

  def add_to_func_list(name, file)
    return if non_arg_check(name, skip_to_args(file))

    skip_to_table_head file
    @func_list[name.to_sym] = get_args file
  end

  def gen
    File.open File.join(File.dirname(__FILE__), 'API.md') do |f|
      skip_head f

      loop do
        name = skip_to_next_api f
        return @func_list unless name

        add_to_func_list name, f
      end
    end
  end
end

puts API.new.func_list.then(&JSON.method(:pretty_generate))
