#!/usr/bin/env ruby

require 'CQHTTP'
require 'dbus'
Thread.abort_on_exception = true

# DBus
class CQHTTP2DBus < DBus::Object
  def initialize(*args)
    @cqhttp = CQHTTP::API.new
    super
  end
  dbus_interface 'org.dastudio.cqhttp' do
    dbus_method :call, 'in func:s, in args:s' do |func, args|
      @cqhttp.send func, JSON.parse(args, symbolize_names: true)
    end

    dbus_signal :message, 'message_type:s, json:s'
    %i[private group get_group_list].each do |i|
      dbus_signal i, 'json:s'
    end
    dbus_signal :event, 'event:s, json:s'
    %i[
      group_upload
      group_admin
      group_decrease
      group_increase
      friend_add
    ].each do |i|
      dbus_signal i, 'json:s'
    end
    dbus_signal :friend_request, 'json:s'
    dbus_signal :join_request, 'json:s'
    dbus_signal :invite_request, 'json:s'
    dbus_signal :all, 'json:s'
    dbus_signal :unknow, 'json:s'
  end
end

# case signal
class Case
  def initialize(info, obj)
    @info = info
    @obj = obj
    @json = gen_json
  end

  def gen_json
    JSON.pretty_generate @info
  end

  def send_json(name)
    @obj.send name, @json
  end

  def unknow
    @obj.send_json :unknow
  end

  def run
    send_json :all
    case @info['post_type']
    when 'message' then message
    when 'event' then event
    when 'request' then request
    else unknow
    end
  end

  def message
    @obj.message @info['message_type'], @json
    send_json @info['message_type']
  end

  def event
    @obj.event @info['event'], @json
    send_json @info['event']
  end

  def request
    case @info['request_type']
    when 'friend' then send_json :friend_request
    when 'group'
      case j['sub_type']
      when 'add' then send_json :join_request
      when 'invite' then send_json :invite_request
      else unknow
      end
    else unknow
    end
  end
end

def cqhttp2dbus(c, obj)
  j = c.json
  Case.new(j, obj).run
end

bus = DBus::SessionBus.instance
service = bus.request_service 'org.dastudio.qq'
obj = CQHTTP2DBus.new '/org/dastudio/qq'
service.export obj

cqhttp = CQHTTP::Service.new
cqhttp.bind ->(c) { cqhttp2dbus c, obj }

Thread.new { cqhttp.run }

main = DBus::Main.new
main << bus
main.run
